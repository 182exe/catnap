name: Create Release
on:
  push:
    branches:
      - main # Update with your desired branch name

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Get previous package version
        id: previous-version
        run: |
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r .version)
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Get current package version
        id: current-version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Check if version changed
        id: version-check
        run: |
          if [[ "${{ steps.current-version.outputs.CURRENT_VERSION }}" == "${{ steps.previous-version.outputs.PREVIOUS_VERSION }}" ]]; then
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Generate release notes
        id: release-notes
        run: |
          RELEASE_NOTES=$(curl -s -X GET -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.PAT }}" \
          "https://api.github.com/repos/${{ github.repository }}/compare/main...HEAD" \
          | jq -r ".commits[].commit.message")

          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          VERSION: ${{ env.CURRENT_VERSION }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
          VERSION_CHANGED: ${{ env.VERSION_CHANGED }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: Release ${{ env.CURRENT_VERSION }}
          body: |
            Commit: [${{ github.sha }}](${{ github.event.compare }})

            ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
        if: env.VERSION_CHANGED == 'true'